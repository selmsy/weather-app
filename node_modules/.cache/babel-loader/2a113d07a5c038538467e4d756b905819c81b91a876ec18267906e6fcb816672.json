{"ast":null,"code":"export const getWindDirection = deg => {\n  if (deg > 15 && deg <= 75) return 'NE';\n  if (deg > 76 && deg <= 105) return 'E';\n  if (deg > 105 && deg <= 165) return 'SE';\n  if (deg > 166 && deg <= 195) return 'S';\n  if (deg > 195 && deg <= 255) return 'SW';\n  if (deg > 255 && deg <= 285) return 'W';\n  if (deg > 285 && deg <= 345) return 'NW';\n  return 'N';\n};\nexport const getHumidityValue = level => {\n  if (level <= 55) return 'Dry and comfortable';\n  if (level > 55 && level <= 65) return 'A bit uncomfortable, sticky feeling';\n  return 'Lots of moisture, uncomfortable air';\n};\nexport const getVisibilityValue = number => {\n  if (number <= 50) return 'Dangerously foggy';\n  if (number > 50 && number <= 500) return 'Expect heavy fog';\n  if (number > 500 && number <= 2000) return 'Expect some fog';\n  if (number > 2000 && number <= 9000) return 'Expect some haze';\n  return 'Very clear day';\n};\nexport const getSunTime = timestamp => {\n  const date = new Date(timestamp * 1000);\n  let hours = date.getHours().toString();\n  let minutes = date.getMinutes().toString();\n  if (hours.length <= 1) hours = `0${hours}`;\n  if (minutes.length <= 1) minutes = `0${minutes}`;\n  return `${hours}:${minutes}`;\n};\nexport const getPop = value => {\n  if (value <= 0.33) return 'Low probability';\n  if (value > 0.33 && value <= 0.66) return 'Moderate probability';\n  return 'High probability';\n};","map":{"version":3,"names":["getWindDirection","deg","getHumidityValue","level","getVisibilityValue","number","getSunTime","timestamp","date","Date","hours","getHours","toString","minutes","getMinutes","length","getPop","value"],"sources":["/Users/selma/Documents/Projects/w-app/src/helpers/index.ts"],"sourcesContent":["export const getWindDirection = (deg: number): string => {\n  if (deg > 15 && deg <= 75) return 'NE'\n\n  if (deg > 76 && deg <= 105) return 'E'\n  if (deg > 105 && deg <= 165) return 'SE'\n\n  if (deg > 166 && deg <= 195) return 'S'\n  if (deg > 195 && deg <= 255) return 'SW'\n\n  if (deg > 255 && deg <= 285) return 'W'\n  if (deg > 285 && deg <= 345) return 'NW'\n\n  return 'N'\n}\n\nexport const getHumidityValue = (level: number): string => {\n  if (level <= 55) return 'Dry and comfortable'\n  if (level > 55 && level <= 65) return 'A bit uncomfortable, sticky feeling'\n\n  return 'Lots of moisture, uncomfortable air'\n}\n\nexport const getVisibilityValue = (number: number): string => {\n  if (number <= 50) return 'Dangerously foggy'\n  if (number > 50 && number <= 500) return 'Expect heavy fog'\n  if (number > 500 && number <= 2000) return 'Expect some fog'\n  if (number > 2000 && number <= 9000) return 'Expect some haze'\n\n  return 'Very clear day'\n}\n\nexport const getSunTime = (timestamp: number): string => {\n  const date = new Date(timestamp * 1000)\n  let hours = date.getHours().toString()\n  let minutes = date.getMinutes().toString()\n\n  if (hours.length <= 1) hours = `0${hours}`\n  if (minutes.length <= 1) minutes = `0${minutes}`\n\n  return `${hours}:${minutes}`\n}\n\nexport const getPop = (value: number): string => {\n  if (value <= 0.33) return 'Low probability'\n  if (value > 0.33 && value <= 0.66) return 'Moderate probability'\n\n  return 'High probability'\n}\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAIC,GAAW,IAAa;EACvD,IAAIA,GAAG,GAAG,EAAE,IAAIA,GAAG,IAAI,EAAE,EAAE,OAAO,IAAI;EAEtC,IAAIA,GAAG,GAAG,EAAE,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,GAAG;EACtC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,IAAI;EAExC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,GAAG;EACvC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,IAAI;EAExC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,GAAG;EACvC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE,OAAO,IAAI;EAExC,OAAO,GAAG;AACZ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,KAAa,IAAa;EACzD,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,qBAAqB;EAC7C,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,qCAAqC;EAE3E,OAAO,qCAAqC;AAC9C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,MAAc,IAAa;EAC5D,IAAIA,MAAM,IAAI,EAAE,EAAE,OAAO,mBAAmB;EAC5C,IAAIA,MAAM,GAAG,EAAE,IAAIA,MAAM,IAAI,GAAG,EAAE,OAAO,kBAAkB;EAC3D,IAAIA,MAAM,GAAG,GAAG,IAAIA,MAAM,IAAI,IAAI,EAAE,OAAO,iBAAiB;EAC5D,IAAIA,MAAM,GAAG,IAAI,IAAIA,MAAM,IAAI,IAAI,EAAE,OAAO,kBAAkB;EAE9D,OAAO,gBAAgB;AACzB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,SAAiB,IAAa;EACvD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,GAAG,IAAI,CAAC;EACvC,IAAIG,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE,CAACC,QAAQ,EAAE;EACtC,IAAIC,OAAO,GAAGL,IAAI,CAACM,UAAU,EAAE,CAACF,QAAQ,EAAE;EAE1C,IAAIF,KAAK,CAACK,MAAM,IAAI,CAAC,EAAEL,KAAK,GAAI,IAAGA,KAAM,EAAC;EAC1C,IAAIG,OAAO,CAACE,MAAM,IAAI,CAAC,EAAEF,OAAO,GAAI,IAAGA,OAAQ,EAAC;EAEhD,OAAQ,GAAEH,KAAM,IAAGG,OAAQ,EAAC;AAC9B,CAAC;AAED,OAAO,MAAMG,MAAM,GAAIC,KAAa,IAAa;EAC/C,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,iBAAiB;EAC3C,IAAIA,KAAK,GAAG,IAAI,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,sBAAsB;EAEhE,OAAO,kBAAkB;AAC3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}